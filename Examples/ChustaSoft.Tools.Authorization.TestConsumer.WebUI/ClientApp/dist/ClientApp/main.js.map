{"version":3,"sources":["./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/auth.service.ts","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/material.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { Credentials } from '@chustasoft/cs-authorization-connector';\r\nimport { AuthService } from '../auth.service';\r\nimport { Culture } from '../models/culture.interface';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n\r\n  cultures: Culture[] = [\r\n    { code: 'en-UK', text: 'English - United Kingdom' },\r\n    { code: 'en-US', text: 'English - United States' },\r\n    { code: 'es-ES', text: 'Spanish - Spain' },\r\n    { code: 'fr-FR', text: 'French - France' }\r\n  ];\r\n\r\n  public credentials: Credentials = {\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    phone: '',\r\n    culture: '',\r\n    parameters: {}\r\n  };\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  public register(): void {\r\n    this.authService.register(this.credentials)\r\n      .then(x =>\r\n      {\r\n        //THEN: Session object is retrived here, allowing to manage user token\r\n\r\n        return x;\r\n      });\r\n  }\r\n\r\n}\r\n","<mat-toolbar>\n  <span>Registration</span>\n</mat-toolbar>\n<mat-card class=\"my-card\">\n  <mat-card-content>\n    <form class=\"my-form\">\n      <mat-form-field class=\"full-width\">\n        <mat-label>User Name</mat-label>\n        <input matInput placeholder=\"User name\" name=\"username\" [(ngModel)]=\"credentials.username\" required>\n      </mat-form-field>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" name=\"email\" type=\"email\" [(ngModel)]=\"credentials.email\">\n      </mat-form-field>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Phone</mat-label>\n        <input matInput placeholder=\"Phone\" name=\"phone\" [(ngModel)]=\"credentials.phone\">\n      </mat-form-field>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Password</mat-label>\n        <input matInput placeholder=\"Password\" name=\"password\" type=\"password\" [(ngModel)]=\"credentials.password\">\n      </mat-form-field>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Culture</mat-label>\n        <mat-select name=\"culture\" [(ngModel)]=\"credentials.culture\">\n          <mat-option *ngFor=\"let culture of cultures\" [value]=\"culture.code\">\n            {{culture.text}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </form>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-raised-button (click)=\"register()\" color=\"primary\">REGISTER</button>\n  </mat-card-actions>\n</mat-card>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ClientApp';\n}\n","<mat-toolbar color=\"primary\">\r\n  <mat-toolbar-row>\r\n    <span><a href=\"/\">HOME</a></span>\r\n    <span class=\"spacer\"></span>\r\n    <a mat-button routerLink=\"/register\">Register</a>\r\n    <a mat-button routerLink=\"/login\">Login</a>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { MaterialModule } from './material.module';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegisterComponent,\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable, Inject } from '@angular/core';\nimport { AuthorizationService } from '@chustasoft/cs-authorization-connector';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService extends AuthorizationService {\n\n  constructor(@Inject('BASE_URL') baseUrl: string)\n  {    \n    super(baseUrl);\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/', pathMatch: 'full' },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'login', component: LoginComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Credentials } from '@chustasoft/cs-authorization-connector';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  public credentials: Credentials = {\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    phone: '',\r\n    culture: '',\r\n    parameters: {}\r\n  };\r\n\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  public login(): void {\r\n    this.authService.login(this.credentials)\r\n      .then(x => {\r\n        //THEN: Session object is retrived here, allowing to manage user token\r\n        \r\n        return x;\r\n      });\r\n  }\r\n}\r\n","<mat-toolbar>\r\n  <span>Login</span>\r\n</mat-toolbar>\r\n<mat-card class=\"my-card\">\r\n  <mat-card-content>\r\n    <form class=\"my-form\">\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Email</mat-label>\r\n        <input matInput placeholder=\"Email\" name=\"email\" [(ngModel)]=\"credentials.email\">\r\n      </mat-form-field>\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input matInput placeholder=\"Password\" name=\"password\" type=\"password\" [(ngModel)]=\"credentials.password\">\r\n      </mat-form-field>\r\n    </form>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-raised-button (click)=\"login()\" color=\"primary\">LOGIN</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n","import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n\r\n@NgModule({\r\n    imports: [        \r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatToolbarModule,\r\n        MatCardModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatSelectModule\r\n    ],\r\n    exports: [        \r\n        MatIconModule,\r\n        MatButtonModule,        \r\n        MatToolbarModule,\r\n        MatCardModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatSelectModule      \r\n    ],\r\n})\r\n\r\nexport class MaterialModule { }","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nexport function getBaseUrl() {\n  return document.getElementsByTagName('base')[0].href;\n}\n\nconst providers = [\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\n];\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}